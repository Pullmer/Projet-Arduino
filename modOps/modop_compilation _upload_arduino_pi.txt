$$$$$$$$$$$$$$$$$$$$$$$$$$$

A faire une seule fois sur chaque Pi :

- sur la Pi, intaller arduno-core et arduino-mk

bash: sudo apt-get install arduino-core arduino-mk

- passer l'utilisateur Pi dans le groupe dialout, pour qu'il ai l'autorisation de communiquer par le port USB

bash: sudo usermod -a -G dialout pi

- Ajouter les librairies dans /usr/share/arduino/libraries et la nouvelle lib WString dans /usr/share/arduino/hardware/arduino/cores/arduino, attention le dossier est protégé par les droits root

A faire pour créer un sketch, le compiler et l'envoyer sur l'Arduino :

- Se placer dans un répertoire vide.

- Créer un Makefile (fichier texte qui sert à configurer le compilateur et l'upload du programme)

bash: touch Makefile

bash: nano Makefile

- Placer le texte suivant :

ARDUINO_DIR = /usr/share/arduino
BOARD_TAG    = uno
ARDUINO_PORT = /dev/ttyACM*
ARDUINO_LIBS =
include /usr/share/arduino/Arduino.mk


**note : remplacer ttyACM* par le bon port (souvent ttyACM0, cf. fin du document)

**note : pour ajouter les libraries, il faut les préciser dans ARDUINO_LIBS, en les séparant par des espaces, sous la forme : 

	ARDUINO_LIBS = Servo Serial

Les libraries seront cherchées par le compilateur dans le dossier /usr/share/arduino/libraries/ et dans le dossier libraries/ à coté du Makefile le cas échéant.

- placer le sketch Arduino dans le répertoire, à coté du Makefile.

- Ajouter les eventuelles sources necessaires

- pour compiler :

bash: make

- pour uploader :

bach: make upload


$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


Pour trouver le port de l'arduino sur Raspbian :

- Débrancher l'arduino de la Pi
- executer :

bash : ls /dev/

- Rebrancher l'arduino
- executer :

bash : ls /dev/

- il est apparu un fichier de la forme ttyACM* ou ttyUSB*, correspondant au port USB de l'Arduino